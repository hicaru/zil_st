// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Mainnet
const MAINNET_CONFIG = {
    api: 'https://api.zilliqa.com',
    impl: '0xa7C67D49C82c7dc1B73D231640B2e4d0661D37c1', // Mainnet staking contract
    chainId: 1
};

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface NodeStakeInfo {
    ssnName: string;
    ssnAddress: string;
    stakeAmount: bigint;
    rewardsAmount: bigint;
    commissionRate: bigint;
    status: string;
}

// –≠—Ç–æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–¥–µ–∞–ª—å–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ batch-–æ—Ç–≤–µ—Ç–µ
interface BatchQueryResult {
    id: number;
    result: any;
    jsonrpc?: string; // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥
interface RewardCalculationData {
    lastRewardCycle: number;
    lastWithdrawCycleMap: any;
    stakeSsnPerCycleMaps: { [ssnAddress: string]: any };
    directDepositMaps: { [ssnAddress: string]: any };
    buffDepositMaps: { [ssnAddress: string]: any };
    delegStakePerCycleMaps: { [ssnAddress: string]: any };
}

class ZilliqaStakeChecker {
    private apiUrl: string;
    private implAddress: string;

    constructor() {
        this.apiUrl = MAINNET_CONFIG.api;
        this.implAddress = MAINNET_CONFIG.impl;
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç batch –∑–∞–ø—Ä–æ—Å –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É JSON-RPC 2.0, –æ—Ç–ø—Ä–∞–≤–ª—è—è –º–∞—Å—Å–∏–≤ –∑–∞–ø—Ä–æ—Å–æ–≤.
     */
    private async batchQuery(queries: Array<[string, string, any[]]>): Promise<BatchQueryResult[]> {
        if (queries.length === 0) return [];
        const startTime = performance.now();

        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º JSON-RPC 2.0 Batch
        const requestBody = queries.map((query, index) => ({
            jsonrpc: '2.0',
            id: index + 1, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å + 1 –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            method: 'GetSmartContractSubState',
            params: [
                query[0], // contract address
                query[1], // field name
                query[2]  // params for field
            ]
        }));

        try {
            console.log(`üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è batch –∑–∞–ø—Ä–æ—Å (${queries.length} –∑–∞–ø—Ä–æ—Å–æ–≤) —á–µ—Ä–µ–∑ fetch (—Å—Ç–∞–Ω–¥–∞—Ä—Ç JSON-RPC 2.0)...`);
            
            const response = await fetch(this.apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestBody), // –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ - —ç—Ç–æ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
            });

            if (!response.ok) {
                throw new Error(`–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
            }

            const jsonResponse: BatchQueryResult[] | {error: any} = await response.json();
            
            if (!Array.isArray(jsonResponse)) {
                 if (jsonResponse.error) {
                    throw new Error(`–û—à–∏–±–∫–∞ RPC: ${jsonResponse.error.message}`);
                 }
                throw new Error('–û—Ç–≤–µ—Ç –æ—Ç API –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, –∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å –¥–ª—è batch-–∑–∞–ø—Ä–æ—Å–∞.');
            }

            const endTime = performance.now();
            console.log(`‚úÖ Batch –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${((endTime - startTime) / 1000).toFixed(2)}—Å`);
            
            // –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è JSON-RPC –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤, –ø–æ—ç—Ç–æ–º—É —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID.
            return jsonResponse.sort((a, b) => a.id - b.id);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ batch –∑–∞–ø—Ä–æ—Å–µ:', error);
            throw error;
        }
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞–¥—Ä–µ—Å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (lowercase hex)
     */
    private normalizeAddress(address: string): string {
        if (!/^0x[0-9a-f]{40}$/i.test(address)) {
            throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞: ${address}. –û–∂–∏–¥–∞–µ—Ç—Å—è hex-–∞–¥—Ä–µ—Å —Ñ–æ—Ä–º–∞—Ç–∞ 0x...`);
        }
        return address.toLowerCase();
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –≤—Å–µ—Ö —É–∑–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è BigInt.
     */
    private async calculateRewards(normalizedAddress: string, userDeposits: { [ssn: string]: string }, rewardData: RewardCalculationData): Promise<{ [ssnAddress: string]: bigint }> {
        console.log(`\nüßÆ –†–∞—Å—á–µ—Ç –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ (–≤ Qa)...`);
        const rewardsBySsn: { [ssnAddress: string]: bigint } = {};

        for (const ssnAddress of Object.keys(userDeposits)) {
            let totalSsnReward = 0n;

            try {
                const lastWithdrawCycle = parseInt(rewardData.lastWithdrawCycleMap?.last_withdraw_cycle_deleg?.[normalizedAddress]?.[ssnAddress] || '0');
                const cyclesToCalculate = [];
                for (let i = lastWithdrawCycle + 1; i <= rewardData.lastRewardCycle; i++) {
                    cyclesToCalculate.push(i);
                }

                if (cyclesToCalculate.length === 0) {
                    rewardsBySsn[ssnAddress] = 0n;
                    continue;
                }

                const delegStakePerCycleMap = new Map<number, bigint>();
                const directMap = rewardData.directDepositMaps[ssnAddress]?.direct_deposit_deleg?.[normalizedAddress]?.[ssnAddress] || {};
                const buffMap = rewardData.buffDepositMaps[ssnAddress]?.buff_deposit_deleg?.[normalizedAddress]?.[ssnAddress] || {};

                for (let cycle = 1; cycle <= rewardData.lastRewardCycle; cycle++) {
                    const c1 = cycle - 1;
                    const c2 = cycle - 2;
                    const dir_amt = BigInt(directMap[c1.toString()] || 0);
                    const buf_amt = BigInt(buffMap[c2.toString()] || 0);
                    const last_amt = delegStakePerCycleMap.get(c1) || 0n;
                    const total_amt = last_amt + dir_amt + buf_amt;
                    delegStakePerCycleMap.set(cycle, total_amt);
                }

                const ssnCycleInfoMap = rewardData.stakeSsnPerCycleMaps[ssnAddress]?.stake_ssn_per_cycle?.[ssnAddress] || {};

                for (const cycle of cyclesToCalculate) {
                    const cycleInfo = ssnCycleInfoMap[cycle];
                    if (!cycleInfo) continue;

                    const totalRewardsForCycle = BigInt(cycleInfo.arguments[1]);
                    const totalStakeForCycle = BigInt(cycleInfo.arguments[0]);
                    const delegStakeForCycle = delegStakePerCycleMap.get(cycle);

                    if (delegStakeForCycle && delegStakeForCycle > 0n && totalStakeForCycle > 0n) {
                        const cycleReward = (delegStakeForCycle * totalRewardsForCycle) / totalStakeForCycle;
                        totalSsnReward += cycleReward;
                    }
                }
            } catch (e) {
                console.error(`- –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —É–∑–ª–∞ ${ssnAddress}:`, e);
                totalSsnReward = 0n;
            }

            rewardsBySsn[ssnAddress] = totalSsnReward;
        }
        
        console.log(`‚úÖ –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω.`);
        return rewardsBySsn;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —É–∑–ª—ã —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Å—Ç–µ–π–∫–æ–º –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
     */
    async getStakedNodes(walletAddress: string): Promise<NodeStakeInfo[]> {
        console.log(`\nüöÄ –ü–æ–∏—Å–∫ —Å—Ç–µ–π–∫–æ–≤ –¥–ª—è –∞–¥—Ä–µ—Å–∞: ${walletAddress}`);
        const normalizedAddress = this.normalizeAddress(walletAddress);
        console.log(`üìç –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: ${normalizedAddress}`);

        const initialQueries: Array<[string, string, any[]]> = [
            [this.implAddress, 'deposit_amt_deleg', [normalizedAddress]],
            [this.implAddress, 'ssnlist', []],
            [this.implAddress, 'lastrewardcycle', []],
            [this.implAddress, 'last_withdraw_cycle_deleg', [normalizedAddress]],
        ];

        try {
            const initialResults = await this.batchQuery(initialQueries);
            
            const depositsResult = initialResults[0]?.result;
            const ssnListResult = initialResults[1]?.result;
            const lastRewardCycleResult = initialResults[2]?.result;
            const lastWithdrawResult = initialResults[3]?.result;

            if (!depositsResult || !ssnListResult || !lastRewardCycleResult) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
            }

            const userDeposits = depositsResult.deposit_amt_deleg?.[normalizedAddress];
            
            if (!userDeposits || Object.keys(userDeposits).length === 0) {
                console.log('‚ùå –£ –¥–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–µ–π–∫–æ–≤');
                return [];
            }
            
            const ssnList = ssnListResult.ssnlist;
            if (!ssnList) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤');

            const rewardQueries: Array<[string, string, any[]]> = [];
            const stakedSsnAddresses = Object.keys(userDeposits);

            for (const ssnAddr of stakedSsnAddresses) {
                rewardQueries.push([this.implAddress, 'stake_ssn_per_cycle', [ssnAddr]]);
                rewardQueries.push([this.implAddress, 'direct_deposit_deleg', [normalizedAddress, ssnAddr]]);
                rewardQueries.push([this.implAddress, 'buff_deposit_deleg', [normalizedAddress, ssnAddr]]);
                rewardQueries.push([this.implAddress, 'deleg_stake_per_cycle', [normalizedAddress, ssnAddr]]);
            }

            const rewardQueryResults = await this.batchQuery(rewardQueries);
            
            const rewardData: RewardCalculationData = {
                lastRewardCycle: parseInt(lastRewardCycleResult.lastrewardcycle),
                lastWithdrawCycleMap: lastWithdrawResult,
                stakeSsnPerCycleMaps: {},
                directDepositMaps: {},
                buffDepositMaps: {},
                delegStakePerCycleMaps: {},
            };
            
            let queryIndex = 0;
            for (const ssnAddr of stakedSsnAddresses) {
                rewardData.stakeSsnPerCycleMaps[ssnAddr] = rewardQueryResults[queryIndex++]?.result;
                rewardData.directDepositMaps[ssnAddr] = rewardQueryResults[queryIndex++]?.result;
                rewardData.buffDepositMaps[ssnAddr] = rewardQueryResults[queryIndex++]?.result;
                rewardData.delegStakePerCycleMaps[ssnAddr] = rewardQueryResults[queryIndex++]?.result;
            }
            
            const rewardsBySsn = await this.calculateRewards(normalizedAddress, userDeposits, rewardData);

            console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç–µ–π–∫–æ–≤ –Ω–∞ ${Object.keys(userDeposits).length} —É–∑–ª–∞—Ö:`);
            console.log('='.repeat(81));

            const stakedNodes: NodeStakeInfo[] = [];
            let totalStaked = 0n;
            let totalRewards = 0n;

            for (const [ssnAddress, stakeAmountStr] of Object.entries(userDeposits)) {
                const ssnInfo = ssnList[ssnAddress];
                
                if (!ssnInfo) {
                    console.log(`‚ö†Ô∏è  –£–∑–µ–ª 0x${ssnAddress} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ`);
                    continue;
                }

                const ssnArgs = ssnInfo.arguments;
                const ssnName = ssnArgs[3] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                const commissionRate = BigInt(ssnArgs[7] || '0');
                const isActive = ssnArgs[0]?.constructor === 'True';
                const status = isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
                
                const stakeAmount = BigInt(stakeAmountStr as string);
                const rewardsAmount = rewardsBySsn[ssnAddress] || 0n;
                
                totalStaked += stakeAmount;
                totalRewards += rewardsAmount;

                const nodeInfo: NodeStakeInfo = { ssnName, ssnAddress: `0x${ssnAddress}`, stakeAmount, rewardsAmount, commissionRate, status };
                stakedNodes.push(nodeInfo);

                console.log(`\nüéØ –£–∑–µ–ª: ${ssnName}`);
                console.log(`    üìç –ê–¥—Ä–µ—Å: 0x${ssnAddress}`);
                console.log(`    üí∞ –°—Ç–µ–π–∫ (Qa): ${stakeAmount.toString()}`);
                console.log(`    üéÅ –ù–∞–≥—Ä–∞–¥—ã (Qa): ${rewardsAmount.toString()}`);
                console.log(`    üíπ –ö–æ–º–∏—Å—Å–∏—è (10^7): ${commissionRate.toString()}`);
                console.log(`    üìä –°—Ç–∞—Ç—É—Å: ${status}`);
            }

            console.log('\n' + '='.repeat(81));
            console.log(`üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
            console.log(`    üéØ –í—Å–µ–≥–æ —É–∑–ª–æ–≤ —Å–æ —Å—Ç–µ–π–∫–æ–º: ${stakedNodes.length}`);
            console.log(`    üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —Å—Ç–µ–π–∫–∞ (Qa): ${totalStaked.toString()}`);
            console.log(`    üéÅ –û–±—â–∞—è —Å—É–º–º–∞ –Ω–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ (Qa): ${totalRewards.toString()}`);
            console.log(`    üåê –°–µ—Ç—å: Mainnet`);
            console.log('='.repeat(81));

            return stakedNodes;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–µ–π–∫–æ–≤:', error);
            throw error;
        }
    }
}


// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    console.log('üî• Zilliqa Staking Checker v2.3 (Standard JSON-RPC Edition)\n');
    
    const walletAddress = process.argv[2];
    
    if (!walletAddress) {
        console.error('‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞');
        console.log('üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: bun run <script_name>.ts <wallet_address>');
        console.log('üìù –ü—Ä–∏–º–µ—Ä: bun run <script_name>.ts 0x2b5c2ea7e1458e72c85116a4f358b5e43c5b98a2');
        process.exit(1);
    }

    try {
        const checker = new ZilliqaStakeChecker();
        const stakedNodes = await checker.getStakedNodes(walletAddress);
        
        if (stakedNodes.length === 0) {
            console.log('\nü§∑ –ù–∞ –¥–∞–Ω–Ω–æ–º –∞–¥—Ä–µ—Å–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–µ–π–∫–æ–≤');
        } else {
            console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ ${stakedNodes.length} —É–∑–ª–∞—Ö —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Å—Ç–µ–π–∫–æ–º!`);
        }
        
    } catch (error) {
        console.error('\nüí• –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏.');
        process.exit(1);
    }
}

process.on('unhandledRejection', (error) => {
    console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});

main().catch(console.error);
